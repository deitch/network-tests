# parse all of the options

while [[ $# > 0 ]]; do
    case $1 in
        --target)       # Takes an option argument, ensuring it has been specified.
            if [ -n "$2" ]; then
                TARGET=$2
                shift
            else
                printf 'ERROR: "--target" requires a non-empty option argument.\n' >&2
                exit 1
            fi
            ;;
        --protocol)       # Takes an option argument, ensuring it has been specified.
            if [ -n "$2" ]; then
                PROTOCOL=$2
                shift
            else
                printf 'ERROR: "--protocol" requires a non-empty option argument.\n' >&2
                exit 1
            fi
            ;;
        --reps)       # Takes an option argument, ensuring it has been specified.
            if [ -n "$2" ]; then
                REPS=$2
                shift
            else
                printf 'ERROR: "--reps" requires a non-empty option argument.\n' >&2
                exit 1
            fi
            ;;
        --port)       # Takes an option argument, ensuring it has been specified.
            if [ -n "$2" ]; then
                CONTROLPORT=$2
                NETSERVERPORT=$2
                shift
            else
                printf 'ERROR: "--port" requires a non-empty option argument.\n' >&2
                exit 1
            fi
            ;;
        --size)       # Takes an option argument, ensuring it has been specified.
            if [ -n "$2" ]; then
                SIZE=$2
                shift
            else
                printf 'ERROR: "--size" requires a non-empty option argument.\n' >&2
                exit 1
            fi
            ;;
        --localport)       # Takes an option argument, ensuring it has been specified.
            if [ -n "$2" ]; then
                LOCALPORT=$2
                shift
            else
                printf 'ERROR: "--localport" requires a non-empty option argument.\n' >&2
                exit 1
            fi
            ;;
        --dataport)       # Takes an option argument, ensuring it has been specified.
            if [ -n "$2" ]; then
                REMOTEPORT=$2
                NETSERVERDATAPORT=$2
                shift
            else
                printf 'ERROR: "--dataport" requires a non-empty option argument.\n' >&2
                exit 1
            fi
            ;;
        --peer)       # Takes an option argument, ensuring it has been specified.
            if [ -n "$2" ]; then
                PEER=$2
                shift
            else
                printf 'ERROR: "--peer" requires a non-empty option argument.\n' >&2
                exit 1
            fi
            ;;
        --peername)       # Takes an option argument, ensuring it has been specified.
            if [ -n "$2" ]; then
                PEERNAME=$2
                shift
            else
                printf 'ERROR: "--peername" requires a non-empty option argument.\n' >&2
                exit 1
            fi
            ;;
        --port)       # Takes an option argument, ensuring it has been specified.
            if [ -n "$2" ]; then
                NETSERVERPORT=$2
                shift
            else
                printf 'ERROR: "--port" requires a non-empty option argument.\n' >&2
                exit 1
            fi
            ;;
        --dataport)       # Takes an option argument, ensuring it has been specified.
            if [ -n "$2" ]; then
                NETSERVERDATAPORT=$2
                shift
            else
                printf 'ERROR: "--dataport" requires a non-empty option argument.\n' >&2
                exit 1
            fi
            ;;
        --ips)       # Takes an option argument, ensuring it has been specified.
            if [ -n "$2" ]; then
                TMPPRIVATEIPS=$2
                shift
            else
                printf 'ERROR: "--ips" requires a non-empty option argument.\n' >&2
                exit 1
            fi
            ;;

        *)               # Default case: If no more options then break out of the loop.
            ;;
    esac

    shift
done

# if we have PRIVATEIPS, split them up
IFS=',' read -ra PRIVATEIPS <<< "$TMPPRIVATEIPS"

